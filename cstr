#!/usr/bin/env python3

import sys
import getopt

def wrapLineInC(line: str):
    line = line.replace('\t', '\\t')
    line = line.replace('\r', '\\r')
    line = line.replace('\n', '\\n')
    line = line.replace('\a', '\\a')
    line = line.replace('"', '\\"')

    return '"' + line + '"'

options = {"file": "", "name": "helpMessage"}

shortopts = "hf:n:"

def parseOptions():
    try:
        opts, args = getopt.getopt(sys.argv[1:], shortopts)
        for opt in opts:
            match opt[0]:
                case "-h":
                    printHelp()
                    exit(0)
                case "-f":
                    options["file"] = opt[1]
                case "-n":
                    options["name"] = opt[1]
                case _:
                    print("Unknown option", file=sys.stderr)
                    exit(1)

    except getopt.GetoptError as err:
        print(err)
        exit(1)

def printHelp():
    print("""usage: cstr [options]
cstr is a tool, to transform any kind of text into C-strings

    options can be:

    -h          print this help
    -f <file>   writes to the specified file
                instead of stdout
    -n <name>   sets the name of the variable
                used in a file
                (only works with -f)
""")

"""
Returns the file to write to, which is either
stdout or a file provided by options
"""
def getFile():
    if options["file"] != "":
        file = open(options["file"], "w")
        # writing header data
        file.write("#pragma once\n\n")
        file.write(f"const char* {options['name']} = ")
        return file
    else:
        return sys.stdout

if __name__ == "__main__":
    try:
        parseOptions()

        file = getFile()

        first = True
        for line in sys.stdin:
            if first:
                first = False
            else:
                file.write("\n")

            wrapped = wrapLineInC(line)
            file.write(wrapped)

        if file == sys.stdout:
            file.write("\n")
        else:
            file.write(";\n")
    except KeyboardInterrupt:
        pass
